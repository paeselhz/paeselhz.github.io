{
  "hash": "85227ae8bab41b3a1fea14ce57b1314c",
  "result": {
    "markdown": "---\ntitle: \"Using GitHub Actions to speed up CI/CD in data science projects\"\nauthor: \"Luis HZ Paese\"\ncategories:\n  - Github Actions\n  - Docker\n  - Data Science\n  - Github\ndate: 2020-09-28\ntoc: true\ncode-copy: true\ntitle-block-banner-color: black\n---\n\nAs the latest advances regarding cloud computing, it has become even more necessary for the implementation of tools that are, at the same time, scalable, and that ensure the reproducibility of the execution. Having this need in mind, a few tools arose to the job, such as [Docker](https://www.docker.com/), that allow the creation of a “recipe” of the application, ensuring that different builds of the same application run equally.\n\nDifferently than a Virtual Machine (VM), that provides an infrastructure through Hypervisors and emulates processors and memory, Docker shares these resources throughout the containers, allowing the developer to focus less on the infrastructure and more on the development of the application. Nonetheless, the containerization of projects and applications mitigates the expression “It Runs on My Machine”, given that it tries to ensure that, independently on the platform chosen by the developer, the Docker container executes always in the same way.\n\nGiven that the benefits of containerization go beyond the development of applications and can be useful in other fields, many data scientists began to use Docker to containerize their analysis, model training, dashboards, and APIs, both to make the delivery of projects easier (given that it reduces the possibility of bugs) and to ensure that the results found once, can always be reached again.\n\n---\n\n## CI/CD — Continous Integration and Continuous Deployment\n\nEven though many insights and machine learning models generated by data scientists are valuable, they fail to add value to the business they are inserted when the projects are stuck in a personal machine that cannot be used by other people. Therefore, to ensure that any modifications are identified and its results are expanded to other teams, there is the process of Continous Integration and Continous Deployment (CI/CD), that allows the automation of the testing and deploy processes in initial versions of the project.\n\nMany people may be familiar with the concepts of CI/CD, however, many of the tools that are used for this process are paid (such as [Jenkins](https://www.jenkins.io/), [CircleCI](https://circleci.com/), and [TravisCI](https://travis-ci.org/)), limiting its use only to people that:\n\n* are willing to pay the price of these tools;\n\n* or are working in a company that already has a CI/CD cycle deployed.\n\n## GitHub and GitHub Actions\n\n[GitHub](https://github.com/) is a well-known code versioning platform that has more than 40 million users and more than 100 million repositories, being an enormous source of open-source code, available to thousands of people anywhere in the world.\n\nAiming to support the creation of open-source projects, as well as allow their users to abstract the processes involving CI/CD, GitHub created in 2019, the GitHub Actions tool. It allows the automation of workflows defined by the user to help with integrated tests, validation of Pull Requests, and many other features. Moreover, the number of actions to be used by the user grows by the day, given that many companies are looking to develop tools to help the users community. Many of these actions already allow the integration of many popular tools such as Docker, AWS CloudFormation, Terraform, and many others that can be found [here](https://github.com/marketplace?type=actions).\n\nEven though GitHub Actions is free to use only for non-private repositories, there are different levels of use that can be leveraged in private projects, before considering the use of any GitHub Enterprise tools. This opens the doors so that many people that develop open-source projects can test their tools and spread their findings in a more automated and scalable way.\n\n## Docker Login & Docker Build and Push\n\nOne of the tools developed to be used alongside GitHub Actions is the login actions in repositories that allow the storage of Docker images (such as [Docker Hub](https://hub.docker.com/), [ECR from AWS](https://aws.amazon.com/pt/ecr/), [GCR from GCP](https://cloud.google.com/container-registry)), as well as the build of these images without the need to occupy the user’s machine. With these in mind, two actions are declared in the CI workflow file, that can be found in these links: [docker/login-action](https://github.com/docker/login-action) and [docker/build-push-action](https://github.com/docker/build-push-action).\n\n---\n\n## Inserting Data Science in the CI/CD process\n\nThe Data Science field is full of different frameworks, dependencies, and different languages that can be used according to the need and abilities of the data scientist, but a common truth amongst them is that they all have the possibility of being encapsulated by a containerization process, helping to ensure the reproducibility of the project.\n\nWith that in mind, the example used by me to deploy the automation tool of GitHub Actions involves the development of a web application using R’s [Shiny](https://shiny.rstudio.com/) library. Nevertheless, the same workflow implementation could be used to deploy APIs developed using Python’s [FastAPI](https://fastapi.tiangolo.com/), i.e., or any other framework that can be encapsulated in a Docker container.\n\nThe project can be found here: [paeselhz/ghActionsDockerShiny](https://github.com/paeselhz/ghActionsDockerShiny). I won’t be entering in details of the development of the application, because the example used by me is relatively simple and have no elaborate development. The focus of this article is the containerization of the project, and the workflow automation to build the image and store it in [Docker Hub](http://hub.docker.com/), making it available for further downloads.\n\n### Creating the Dockerfile\n\nFor those familiarized with the Dockerfile and its syntax, the execution is the same as expected in a project that will be developed, built, and ran locally with Docker. In it, we declare the base image that will be used for further installation of libraries and dependencies, as well as the configuration of the project, file copy, and other steps that usually can be added to a Dockerfile.\n\n\n```{dockerfile}\nFROM rocker/shiny:4.0.0\n\nRUN apt-get update \\\n  && apt-get install -y \\\n    libxml2-dev \\\n    libglpk-dev \\\n  && install2.r \\\n    --error \\\n    dplyr \\\n    shiny \\\n    purrr \\\n    highcharter \\\n    shinyWidgets \\\n    shinycssloaders \\\n    devtools \\\n    xml2 \\\n    igraph \\\n    readr\n  \nRUN R -e \"devtools::install_github('wilsonfreitas/rbcb')\"\nCOPY . /srv/shiny-server\nRUN chmod -R 777 /srv/shiny-server\n```\n\n\nThis script, which is located in the project root directory, is responsible to gather an image that already has Shiny and its dependencies installed, and the installation of libraries that will be used by the app developed within R.\n\n### Creating the Workflow file\n\nTo GitHub Actions know which steps need to be taken for the workflow automation, it becomes necessary to create a file within the project that will be located at .github/workflows/main.yml, the file syntax is the same as any YAML file, being easy to code. In case the user does not want to do this process locally and commit the changes, GitHub itself has an online code editor for the creation of the workflow.\n\nIn this file are declared a few steps such as the name of the workflow, the triggers that will be used to deploy the workflow execution, and the jobs that it will be responsible for executing. The name and trigger parts of the file are highly customizable, and the user can change it in many ways, moreover, in the part of the job, there are a few steps that are needed for the job to login in Docker Hub, configure BuildX (a tool that will be used to build the image), configure QEMU (a tool that will be allowing multi-platform builds), deploy the built image to Docker Hub, logout and clean the machine to ensure that no processes are still running.\n\n\n```{yaml}\n# Setting up a Workflow to work with Github Actions\nname: ci\n# Controls to when trigger the GH Action\n# Below are configurations to the following triggers:\n# - commits at master branch\n# - tag commits at the project\n# - scheduled to run at 01:00GMT\n# The user can also configure triggers at pull requests\n# as well as remove branches from triggering GH Actions\non:\n  push:\n    branches: [ master ]\n    tags: [ '*.*.*' ]\n  schedule:\n    - cron: '0 1 * * *'\n# Below there is the job configuration to build the image\n# and push it to a DockerHub repository\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v2\n      -\n        name: Prepare\n        id: prep\n        run: |\n          DOCKER_IMAGE=<USER_NAME>/<REPOSITORY_NAME>\n          VERSION=noop\n          if [ \"${{ github.event_name }}\" = \"schedule\" ]; then\n            VERSION=nightly\n          elif [[ $GITHUB_REF == refs/tags/* ]]; then\n            VERSION=${GITHUB_REF#refs/tags/}\n          elif [[ $GITHUB_REF == refs/heads/* ]]; then\n            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')\n            if [ \"${{ github.event.repository.default_branch }}\" = \"$VERSION\" ]; then\n              VERSION=edge\n            fi\n          fi\n          TAGS=\"${DOCKER_IMAGE}:${VERSION}\"\n          if [[ $VERSION =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n            MINOR=${VERSION%.*}\n            MAJOR=${MINOR%.*}\n            TAGS=\"$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest\"\n          elif [ \"${{ github.event_name }}\" = \"push\" ]; then\n            TAGS=\"$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}\"\n          fi\n          echo ::set-output name=version::${VERSION}\n          echo ::set-output name=tags::${TAGS}\n          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      -\n        name: Login to DockerHub\n        if: github.event_name != 'pull_request'\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: ./Dockerfile\n          platforms: linux/amd64\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.prep.outputs.tags }}\n          labels: |\n            org.opencontainers.image.title=${{ github.event.repository.name }}\n            org.opencontainers.image.description=${{ github.event.repository.description }}\n            org.opencontainers.image.url=${{ github.event.repository.html_url }}\n            org.opencontainers.image.source=${{ github.event.repository.clone_url }}\n            org.opencontainers.image.version=${{ steps.prep.outputs.version }}\n            org.opencontainers.image.created=${{ steps.prep.outputs.created }}\n            org.opencontainers.image.revision=${{ github.sha }}\n            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}\n```\n\n\nThe workflow code has almost none external dependencies, given that the creation of the Docker image name and its tags are within this code, however, it needs a pair of Secrets to log in at Docker Hub, in this case, the username used by Docker, and a Token to log in at Docker Hub ([which can be generated here](https://hub.docker.com/settings/security)). With the username and Token, the user just needs to go at their repository, in the Settings tab and add the token in the Secrets subpage, as seen in the image below:\n\n![](github_security.png)\n\nWith these steps, the project should be able to be executed using GitHub Actions to allow the automation of the build, test, and deploy processes.\n\nIn the example used by this article, the final image can be found at Docker Hub [here](https://hub.docker.com/repository/docker/lhzpaese/ghactions_docker_shiny/general), and tested locally by running the command:\n\n`docker run -p 3838:3838 lhzpaese/ghactions_docker_shiny:latest`\n\n---\n\n#### Sources\n\nMany of the references to projects and tools used in this article are added in form of Hyperlinks along with the text. However, I’d like to leave the Docker Webinar that served as inspiration for this project, presented by [metcalfc](https://github.com/metcalfc), where he introduces the tools used for the integration of GitHub Actions and Docker.\n\n\n{{< video https://youtu.be/uoLGTAev16g >}}\n\n\n\nThanks for your attention, and any questions or suggestions, please do not hesitate to contact me at [LinkedIn](https://www.linkedin.com/in/lhzpaese/), and [paeselhz](https://github.com/paeselhz).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}